{"ast":null,"code":"// src/api/settlementService.js\nimport axios from 'axios';\nconst GROUP_API_URL = 'http://localhost:5000/api/groups';\nconst SETTLEMENT_API_URL = 'http://localhost:5000/api/settlements';\n\n/**\r\n * Gets the current balances for all members in a group.\r\n * @param {string} groupId - The ID of the group.\r\n * @param {string} token - The current user's JWT for authorization.\r\n * @returns {Promise<object>} An object containing the balance details for each member.\r\n */\nexport const getGroupBalances = async (groupId, token) => {\n  try {\n    const response = await axios.get(`${GROUP_API_URL}/${groupId}/balances`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error('Error fetching group balances:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      message: 'Failed to fetch group balances.'\n    };\n  }\n};\n\n/**\r\n * Records a settlement payment between two users.\r\n * @param {object} settlementData - The details of the settlement.\r\n * @param {string} settlementData.from - The user ID of the person paying.\r\n * @param {string} settlementData.to - The user ID of the person being paid.\r\n * @param {string} settlementData.group - The group ID this settlement belongs to.\r\n * @param {number} settlementData.amount - The amount being settled.\r\n * @param {string} token - The current user's JWT for authorization.\r\n * @returns {Promise<object>} The newly created settlement record.\r\n */\nexport const recordSettlement = async (settlementData, token) => {\n  try {\n    const response = await axios.post(SETTLEMENT_API_URL, settlementData, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response4;\n    console.error('Error recording settlement:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n      message: 'Failed to record settlement.'\n    };\n  }\n};\n\n/**\r\n * Gets the settlement payment history for a specific group.\r\n * @param {string} groupId - The ID of the group.\r\n * @param {string} token - The user's auth token.\r\n * @returns {Promise<Array>} A promise that resolves to an array of settlement records.\r\n */\nexport const getSettlementHistory = async (groupId, token) => {\n  const config = {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  };\n  try {\n    const response = await axios.get(`${SETTLEMENT_API_URL}/group/${groupId}`, config);\n    return response.data;\n  } catch (error) {\n    var _error$response5, _error$response6;\n    console.error('Error fetching settlement history:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || {\n      message: 'A network error occurred.'\n    };\n  }\n};","map":{"version":3,"names":["axios","GROUP_API_URL","SETTLEMENT_API_URL","getGroupBalances","groupId","token","response","get","headers","data","error","_error$response","_error$response2","console","message","recordSettlement","settlementData","post","_error$response3","_error$response4","getSettlementHistory","config","_error$response5","_error$response6"],"sources":["C:/Users/dhuyn/Sync/Projects/fairfund-frontend/fairfund-frontend/src/api/settlementService.js"],"sourcesContent":["// src/api/settlementService.js\r\nimport axios from 'axios';\r\n\r\nconst GROUP_API_URL = 'http://localhost:5000/api/groups';\r\nconst SETTLEMENT_API_URL = 'http://localhost:5000/api/settlements';\r\n\r\n/**\r\n * Gets the current balances for all members in a group.\r\n * @param {string} groupId - The ID of the group.\r\n * @param {string} token - The current user's JWT for authorization.\r\n * @returns {Promise<object>} An object containing the balance details for each member.\r\n */\r\nexport const getGroupBalances = async (groupId, token) => {\r\n  try {\r\n    const response = await axios.get(`${GROUP_API_URL}/${groupId}/balances`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching group balances:', error.response?.data || error.message);\r\n    throw error.response?.data || { message: 'Failed to fetch group balances.' };\r\n  }\r\n};\r\n\r\n/**\r\n * Records a settlement payment between two users.\r\n * @param {object} settlementData - The details of the settlement.\r\n * @param {string} settlementData.from - The user ID of the person paying.\r\n * @param {string} settlementData.to - The user ID of the person being paid.\r\n * @param {string} settlementData.group - The group ID this settlement belongs to.\r\n * @param {number} settlementData.amount - The amount being settled.\r\n * @param {string} token - The current user's JWT for authorization.\r\n * @returns {Promise<object>} The newly created settlement record.\r\n */\r\nexport const recordSettlement = async (settlementData, token) => {\r\n  try {\r\n    const response = await axios.post(SETTLEMENT_API_URL, settlementData, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error recording settlement:', error.response?.data || error.message);\r\n    throw error.response?.data || { message: 'Failed to record settlement.' };\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Gets the settlement payment history for a specific group.\r\n * @param {string} groupId - The ID of the group.\r\n * @param {string} token - The user's auth token.\r\n * @returns {Promise<Array>} A promise that resolves to an array of settlement records.\r\n */\r\nexport const getSettlementHistory = async (groupId, token) => {\r\n    const config = { headers: { 'Authorization': `Bearer ${token}` } };\r\n    try {\r\n        const response = await axios.get(`${SETTLEMENT_API_URL}/group/${groupId}`, config);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error fetching settlement history:', error.response?.data || error.message);\r\n        throw error.response?.data || { message: 'A network error occurred.' };\r\n    }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAG,kCAAkC;AACxD,MAAMC,kBAAkB,GAAG,uCAAuC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,KAAK,KAAK;EACxD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,aAAa,IAAIG,OAAO,WAAW,EAAE;MACvEI,OAAO,EAAE;QACP,eAAe,EAAE,UAAUH,KAAK;MAClC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,gBAAA;IACdC,OAAO,CAACH,KAAK,CAAC,gCAAgC,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACJ,QAAQ,cAAAK,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAIC,KAAK,CAACI,OAAO,CAAC;IACtF,MAAM,EAAAF,gBAAA,GAAAF,KAAK,CAACJ,QAAQ,cAAAM,gBAAA,uBAAdA,gBAAA,CAAgBH,IAAI,KAAI;MAAEK,OAAO,EAAE;IAAkC,CAAC;EAC9E;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,cAAc,EAAEX,KAAK,KAAK;EAC/D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACiB,IAAI,CAACf,kBAAkB,EAAEc,cAAc,EAAE;MACpER,OAAO,EAAE;QACP,eAAe,EAAE,UAAUH,KAAK;MAClC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAQ,gBAAA,EAAAC,gBAAA;IACdN,OAAO,CAACH,KAAK,CAAC,6BAA6B,EAAE,EAAAQ,gBAAA,GAAAR,KAAK,CAACJ,QAAQ,cAAAY,gBAAA,uBAAdA,gBAAA,CAAgBT,IAAI,KAAIC,KAAK,CAACI,OAAO,CAAC;IACnF,MAAM,EAAAK,gBAAA,GAAAT,KAAK,CAACJ,QAAQ,cAAAa,gBAAA,uBAAdA,gBAAA,CAAgBV,IAAI,KAAI;MAAEK,OAAO,EAAE;IAA+B,CAAC;EAC3E;AACF,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,oBAAoB,GAAG,MAAAA,CAAOhB,OAAO,EAAEC,KAAK,KAAK;EAC1D,MAAMgB,MAAM,GAAG;IAAEb,OAAO,EAAE;MAAE,eAAe,EAAE,UAAUH,KAAK;IAAG;EAAE,CAAC;EAClE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGL,kBAAkB,UAAUE,OAAO,EAAE,EAAEiB,MAAM,CAAC;IAClF,OAAOf,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAY,gBAAA,EAAAC,gBAAA;IACZV,OAAO,CAACH,KAAK,CAAC,oCAAoC,EAAE,EAAAY,gBAAA,GAAAZ,KAAK,CAACJ,QAAQ,cAAAgB,gBAAA,uBAAdA,gBAAA,CAAgBb,IAAI,KAAIC,KAAK,CAACI,OAAO,CAAC;IAC1F,MAAM,EAAAS,gBAAA,GAAAb,KAAK,CAACJ,QAAQ,cAAAiB,gBAAA,uBAAdA,gBAAA,CAAgBd,IAAI,KAAI;MAAEK,OAAO,EAAE;IAA4B,CAAC;EAC1E;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}