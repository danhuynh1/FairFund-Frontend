{"ast":null,"code":"// src/api/groupService.js\n// This file contains all API calls related to groups.\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api/groups\";\n\n/**\r\n * Creates a new group.\r\n * @param {string} groupName - The name of the new group.\r\n * @param {string} token - The user's JWT for authorization.\r\n * @returns {Promise<object>} The newly created group object.\r\n */\nexport const createGroup = async (groupData, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  try {\n    // THE FIX IS HERE: The URL now includes \"/create\"\n    const response = await axios.post(`${API_URL}/create`, groupData, config);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error(\"Error creating group:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      message: \"A network error occurred.\"\n    };\n  }\n};\n\n/**\r\n * Fetches all groups for the currently logged-in user.\r\n * @param {string} token - The user's JWT for authorization.\r\n * @returns {Promise<Array>} An array of the user's groups.\r\n */\nexport const getMyGroups = async token => {\n  try {\n    const response = await axios.get(API_URL, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error(\"Error fetching groups:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Fetches the details for a single group by its ID.\r\n * @param {string} groupId - The ID of the group to fetch.\r\n * @param {string} token - The user's JWT for authorization.\r\n * @returns {Promise<object>} The group object with populated members.\r\n */\nexport const getGroupDetails = async (groupId, token) => {\n  try {\n    const response = await axios.get(`${API_URL}/${groupId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error(\"Error fetching group details:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw error;\n  }\n};\n/**\r\n * Adds one or more users to a group.\r\n * @param {string} groupId - The ID of the group to update.\r\n * @param {Array<string>} userIds - An array containing the IDs of users to add.\r\n * @param {string} token - The user's JWT for authorization.\r\n * @returns {Promise<object>} The updated group object.\r\n */\nexport const addUsersToGroup = async (groupId, userIds, token) => {\n  try {\n    const response = await axios.post(`http://localhost:5000/api/groups/${groupId}/add-users`, {\n      userIds\n    },\n    // The request body, expecting an object with a userIds array\n    {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    console.error(\"Error adding users to group:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Updates the budget of a specific group.\r\n * @param {string} groupId - The ID of the group to update.\r\n * @param {object} budgetData - An object containing the new budget, e.g., { budget: 500 }.\r\n * @param {string} token - The user's JWT for authorization.\r\n * @returns {Promise<object>} The server's response.\r\n */\nexport const updateGroupBudget = async (groupId, budgetData, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  try {\n    const response = await axios.put(`${API_URL}/${groupId}/budget`, budgetData, config);\n    return response.data;\n  } catch (error) {\n    var _error$response6, _error$response7;\n    console.error(\"Error updating group budget:\", ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message);\n    throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || {\n      message: \"A network error occurred.\"\n    };\n  }\n};","map":{"version":3,"names":["axios","API_URL","createGroup","groupData","token","config","headers","Authorization","response","post","data","error","_error$response","_error$response2","console","message","getMyGroups","get","_error$response3","getGroupDetails","groupId","log","_error$response4","addUsersToGroup","userIds","_error$response5","updateGroupBudget","budgetData","put","_error$response6","_error$response7"],"sources":["C:/Users/dhuyn/Sync/Projects/fairfund-frontend/fairfund-frontend/src/api/groupService.js"],"sourcesContent":["// src/api/groupService.js\r\n// This file contains all API calls related to groups.\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api/groups\";\r\n\r\n/**\r\n * Creates a new group.\r\n * @param {string} groupName - The name of the new group.\r\n * @param {string} token - The user's JWT for authorization.\r\n * @returns {Promise<object>} The newly created group object.\r\n */\r\nexport const createGroup = async (groupData, token) => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n  try {\r\n    // THE FIX IS HERE: The URL now includes \"/create\"\r\n    const response = await axios.post(`${API_URL}/create`, groupData, config);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\r\n      \"Error creating group:\",\r\n      error.response?.data || error.message\r\n    );\r\n    throw error.response?.data || { message: \"A network error occurred.\" };\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches all groups for the currently logged-in user.\r\n * @param {string} token - The user's JWT for authorization.\r\n * @returns {Promise<Array>} An array of the user's groups.\r\n */\r\nexport const getMyGroups = async (token) => {\r\n  try {\r\n    const response = await axios.get(API_URL, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\r\n      \"Error fetching groups:\",\r\n      error.response?.data || error.message\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches the details for a single group by its ID.\r\n * @param {string} groupId - The ID of the group to fetch.\r\n * @param {string} token - The user's JWT for authorization.\r\n * @returns {Promise<object>} The group object with populated members.\r\n */\r\nexport const getGroupDetails = async (groupId, token) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/${groupId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log(response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\r\n      \"Error fetching group details:\",\r\n      error.response?.data || error.message\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n/**\r\n * Adds one or more users to a group.\r\n * @param {string} groupId - The ID of the group to update.\r\n * @param {Array<string>} userIds - An array containing the IDs of users to add.\r\n * @param {string} token - The user's JWT for authorization.\r\n * @returns {Promise<object>} The updated group object.\r\n */\r\nexport const addUsersToGroup = async (groupId, userIds, token) => {\r\n  try {\r\n    const response = await axios.post(\r\n      `http://localhost:5000/api/groups/${groupId}/add-users`,\r\n      { userIds }, // The request body, expecting an object with a userIds array\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\r\n      \"Error adding users to group:\",\r\n      error.response?.data || error.message\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the budget of a specific group.\r\n * @param {string} groupId - The ID of the group to update.\r\n * @param {object} budgetData - An object containing the new budget, e.g., { budget: 500 }.\r\n * @param {string} token - The user's JWT for authorization.\r\n * @returns {Promise<object>} The server's response.\r\n */\r\nexport const updateGroupBudget = async (groupId, budgetData, token) => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  };\r\n  try {\r\n    const response = await axios.put(\r\n      `${API_URL}/${groupId}/budget`,\r\n      budgetData,\r\n      config\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\r\n      \"Error updating group budget:\",\r\n      error.response?.data || error.message\r\n    );\r\n    throw error.response?.data || { message: \"A network error occurred.\" };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}