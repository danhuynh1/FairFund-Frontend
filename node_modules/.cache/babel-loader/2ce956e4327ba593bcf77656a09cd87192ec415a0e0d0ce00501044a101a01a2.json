{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_API_URL;\nconst SETTLEMENT_API_URL = `${BASE_URL}/settlements`;\n\n/**\r\n * Records a settlement payment between two users.\r\n * @param {object} settlementData - The details of the settlement.\r\n * @param {string} settlementData.from - The user ID of the person paying.\r\n * @param {string} settlementData.to - The user ID of the person being paid.\r\n * @param {string} settlementData.group - The group ID this settlement belongs to.\r\n * @param {number} settlementData.amount - The amount being settled.\r\n * @param {string} token - The current user's JWT for authorization.\r\n * @returns {Promise<object>} The newly created settlement record.\r\n */\nexport const recordSettlement = async (settlementData, token) => {\n  try {\n    console.log(\"Recording settlement:\", settlementData);\n    const response = await axios.post(SETTLEMENT_API_URL, settlementData, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error(\"Error recording settlement:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n      message: \"Failed to record settlement.\"\n    };\n  }\n};\n\n/**\r\n * Gets the settlement payment history for a specific group.\r\n * @param {string} groupId - The ID of the group.\r\n * @param {string} token - The user's auth token.\r\n * @returns promise that resolves to an array of settlement records.\r\n */\nexport const getSettlementHistory = async (groupId, token) => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  try {\n    const response = await axios.get(`${SETTLEMENT_API_URL}/group/${groupId}`, config);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response4;\n    console.error(\"Error fetching settlement history:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n      message: \"A network error occurred.\"\n    };\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_API_URL","SETTLEMENT_API_URL","recordSettlement","settlementData","token","console","log","response","post","headers","Authorization","data","error","_error$response","_error$response2","message","getSettlementHistory","groupId","config","get","_error$response3","_error$response4"],"sources":["C:/Users/dhuyn/Sync/Projects/fairfund-frontend/fairfund-frontend/src/api/settlementService.js"],"sourcesContent":["import axios from \"axios\";\r\nconst BASE_URL = process.env.REACT_APP_API_URL;\r\nconst SETTLEMENT_API_URL = `${BASE_URL}/settlements`;\r\n\r\n/**\r\n * Records a settlement payment between two users.\r\n * @param {object} settlementData - The details of the settlement.\r\n * @param {string} settlementData.from - The user ID of the person paying.\r\n * @param {string} settlementData.to - The user ID of the person being paid.\r\n * @param {string} settlementData.group - The group ID this settlement belongs to.\r\n * @param {number} settlementData.amount - The amount being settled.\r\n * @param {string} token - The current user's JWT for authorization.\r\n * @returns {Promise<object>} The newly created settlement record.\r\n */\r\nexport const recordSettlement = async (settlementData, token) => {\r\n  try {\r\n    console.log(\"Recording settlement:\", settlementData);\r\n    const response = await axios.post(SETTLEMENT_API_URL, settlementData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\r\n      \"Error recording settlement:\",\r\n      error.response?.data || error.message\r\n    );\r\n    throw error.response?.data || { message: \"Failed to record settlement.\" };\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the settlement payment history for a specific group.\r\n * @param {string} groupId - The ID of the group.\r\n * @param {string} token - The user's auth token.\r\n * @returns promise that resolves to an array of settlement records.\r\n */\r\nexport const getSettlementHistory = async (groupId, token) => {\r\n  const config = { headers: { Authorization: `Bearer ${token}` } };\r\n  try {\r\n    const response = await axios.get(\r\n      `${SETTLEMENT_API_URL}/group/${groupId}`,\r\n      config\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\r\n      \"Error fetching settlement history:\",\r\n      error.response?.data || error.message\r\n    );\r\n    throw error.response?.data || { message: \"A network error occurred.\" };\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAC9C,MAAMC,kBAAkB,GAAG,GAAGJ,QAAQ,cAAc;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,gBAAgB,GAAG,MAAAA,CAAOC,cAAc,EAAEC,KAAK,KAAK;EAC/D,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,cAAc,CAAC;IACpD,MAAMI,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAACP,kBAAkB,EAAEE,cAAc,EAAE;MACpEM,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUN,KAAK;MAChC;IACF,CAAC,CAAC;IACF,OAAOG,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,gBAAA;IACdT,OAAO,CAACO,KAAK,CACX,6BAA6B,EAC7B,EAAAC,eAAA,GAAAD,KAAK,CAACL,QAAQ,cAAAM,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAIC,KAAK,CAACG,OAChC,CAAC;IACD,MAAM,EAAAD,gBAAA,GAAAF,KAAK,CAACL,QAAQ,cAAAO,gBAAA,uBAAdA,gBAAA,CAAgBH,IAAI,KAAI;MAAEI,OAAO,EAAE;IAA+B,CAAC;EAC3E;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAAA,CAAOC,OAAO,EAAEb,KAAK,KAAK;EAC5D,MAAMc,MAAM,GAAG;IAAET,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUN,KAAK;IAAG;EAAE,CAAC;EAChE,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMX,KAAK,CAACuB,GAAG,CAC9B,GAAGlB,kBAAkB,UAAUgB,OAAO,EAAE,EACxCC,MACF,CAAC;IACD,OAAOX,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAQ,gBAAA,EAAAC,gBAAA;IACdhB,OAAO,CAACO,KAAK,CACX,oCAAoC,EACpC,EAAAQ,gBAAA,GAAAR,KAAK,CAACL,QAAQ,cAAAa,gBAAA,uBAAdA,gBAAA,CAAgBT,IAAI,KAAIC,KAAK,CAACG,OAChC,CAAC;IACD,MAAM,EAAAM,gBAAA,GAAAT,KAAK,CAACL,QAAQ,cAAAc,gBAAA,uBAAdA,gBAAA,CAAgBV,IAAI,KAAI;MAAEI,OAAO,EAAE;IAA4B,CAAC;EACxE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}